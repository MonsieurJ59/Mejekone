# üê≥ Commandes Docker
.PHONY: start stop restart logs clean rebuild db-reset

# D√©marrer tous les services (sans rebuild)
start:
	docker-compose up -d

# D√©marrer avec rebuild (seulement quand n√©cessaire)
rebuild:
	docker-compose up -d --build

# D√©marrage rapide (sans d√©tacher)
dev:
	docker-compose up

# Arr√™ter tous les services
stop:
	docker-compose down

# Red√©marrer les services
restart:
	docker-compose restart

# Nettoyer et red√©marrer compl√®tement
clean-start:
	docker-compose down -v
	docker-compose up -d --build

# Voir les logs
logs:
	docker-compose logs -f

# Voir les logs d'un service sp√©cifique
logs-backend:
	docker-compose logs -f backend

logs-frontend:
	docker-compose logs -f frontend

logs-mysql:
	docker-compose logs -f mysql

# Ex√©cuter les fixtures
fixtures:
	docker-compose exec backend npm run seed

# Analyser un tournoi termin√©
analyze-end-tournament:
	docker-compose exec backend npx ts-node src/scripts/analyze-tournament.ts

# Entrer dans le conteneur backend
shell-backend:
	docker-compose exec backend sh

# Entrer dans le conteneur frontend
shell-frontend:
	docker-compose exec frontend sh

# Voir le statut des conteneurs
status:
	docker-compose ps

# Nettoyer les images et volumes inutilis√©s
clean:
	docker system prune -f
	docker volume prune -f


# üß™ Tests du backend
.PHONY: test-backend test-backend-watch test-backend-e2e test-backend-unit

# Ex√©cuter tous les tests du backend
test-backend:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm test"

# Ex√©cuter les tests en mode watch
test-backend-watch:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm run test:watch"

# Ex√©cuter uniquement les tests end-to-end
test-backend-e2e:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm run test:e2e"

# Ex√©cuter uniquement les tests e2e stables
test-backend-e2e-stable:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm run test:e2e:stable"

# Ex√©cuter les tests e2e en d√©veloppement (sans les tests de flux complet)
test-backend-e2e-dev:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm run test:e2e:dev"

# Ex√©cuter uniquement les tests unitaires
test-backend-unit:
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npm run test:unit"

# Ex√©cuter un test sp√©cifique
test-backend-file:
	@read -p "Entrez le chemin du fichier de test (ex: tests/e2e/tournament-flow.test.ts): " file_path; \
	docker-compose exec backend sh -c "cd /app && npm install ts-jest && npx jest $$file_path"