# üê≥ Commandes Docker
.PHONY: start stop restart logs clean rebuild db-reset

# D√©marrer tous les services (sans rebuild)
start:
	docker-compose up -d

# D√©marrer avec rebuild (seulement quand n√©cessaire)
rebuild:
	docker-compose up -d --build

# D√©marrage rapide (sans d√©tacher)
dev:
	docker-compose up

# Arr√™ter tous les services
stop:
	docker-compose down

# Red√©marrer les services
restart:
	docker-compose restart

# Nettoyer et red√©marrer compl√®tement
clean-start:
	docker-compose down -v
	docker-compose up -d --build

# Voir les logs
logs:
	docker-compose logs -f

# Voir les logs d'un service sp√©cifique
logs-backend:
	docker-compose logs -f backend

logs-frontend:
	docker-compose logs -f frontend

logs-mysql:
	docker-compose logs -f mysql

logs-phpmyadmin:
	docker-compose logs -f phpmyadmin

# R√©initialiser la base de donn√©es
db-reset:
	docker-compose down -v mysql
	docker-compose up -d mysql

# Entrer dans le conteneur backend
shell-backend:
	docker-compose exec backend sh

# Entrer dans le conteneur frontend
shell-frontend:
	docker-compose exec frontend sh

# Voir le statut des conteneurs
status:
	docker-compose ps

# Nettoyer les images et volumes inutilis√©s
clean:
	docker system prune -f
	docker volume prune -f

# üéµ Commandes sp√©cifiques √† M√©jekon√©
.PHONY: import-songs create-playlist

# Importer des chansons (√† impl√©menter)
import-songs:
	@echo "Fonctionnalit√© √† impl√©menter"

# Cr√©er une playlist (√† impl√©menter)
create-playlist:
	@echo "Fonctionnalit√© √† impl√©menter"

# üß™ Tests du backend (Spring Boot)
.PHONY: test-backend test-backend-unit test-backend-integration

# Ex√©cuter tous les tests du backend
test-backend:
	docker-compose exec backend ./mvnw test

# Ex√©cuter uniquement les tests unitaires
test-backend-unit:
	docker-compose exec backend ./mvnw test -Dtest=*Test

# Ex√©cuter uniquement les tests d'int√©gration
test-backend-integration:
	docker-compose exec backend ./mvnw test -Dtest=*IT

# üñ•Ô∏è Commandes frontend (React)
.PHONY: lint-frontend format-frontend build-frontend

# Linter le frontend
lint-frontend:
	docker-compose exec frontend npm run lint

# Formater le code frontend
format-frontend:
	docker-compose exec frontend npm run format

# Build le frontend pour la production
build-frontend:
	docker-compose exec frontend npm run build